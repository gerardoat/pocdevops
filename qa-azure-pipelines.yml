# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- QA

variables:
  buildId: QA-$(Build.BuildNumber)
  hostJMeter: '40.124.90.48'
  buildConfiguration: 'Release'
  containerRegistry: 'qaacrpocrandd.azurecr.io'
  imageRepository: 'pocrandd'
  tag: $(Build.BuildNumber)
  UriAppPocRandD: 'http://40.124.90.48/'

jobs:
- job: CR
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'qaacrpocrandd'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: 'src/Dockerfile'
        tags: '$(tag)'

    - publish: manifests
      artifact: manifests

- job: Ingress
  dependsOn: CR
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Kubernetes@1
    displayName: 'Ingress Controller'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'qaakspocrandd-default-admin'
      command: 'apply'
      arguments: '-f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.35.0/deploy/static/provider/cloud/deploy.yaml'
  - task: Kubernetes@1
    displayName: 'Ingress Rules'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'qaakspocrandd-default-admin'
      command: 'apply'
      arguments: '-f manifests/ingress-rules.yml'

- deployment: Service
  pool:
    vmImage: 'ubuntu-latest'
  displayName: AKS
  dependsOn: Ingress
  environment: 'qaakspocrandd.default'
  strategy:
    runOnce:
      deploy:
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy to kubernetes cluster
            inputs:
              action: 'deploy'
              manifests: '$(Pipeline.Workspace)/manifests/pocrandd.yml'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

- job: SeleniumTests
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: dotnet build src --configuration $(buildConfiguration)
    displayName: 'Build Tests Project'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: 'src/PocRandD.SeleniumTest/PocRandD.SeleniumTest.csproj'
    displayName: 'FunctionalTests'
  - task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact Selenium Results'    
  dependsOn: AKS    
  condition: succeeded()
- job: JMeterTests
  pool:
    vmImage: ubuntu-latest
  dependsOn: SeleniumTests
  steps:
    - task: Bash@3
      displayName: Execute JMeter tests
      inputs:
        targetType: filePath
        filePath: 'jmeter/test.sh'
        arguments: '$PWD jmeterpocrandd.jmx $(hostJMeter) $(buildId)'
        workingDirectory: jmeter
        failOnStderr: false